{"ast":null,"code":"// Add these updates to your VideoGenerationApp.jsx\n\n// Update the generateVideo function to handle real generation:\nconst generateVideo = async e => {\n  e.preventDefault();\n  if (!prompt.trim()) return;\n  setIsGenerating(true);\n  try {\n    const response = await fetch(`${API_BASE_URL}/videos`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        prompt: prompt.trim(),\n        duration: duration\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n    }\n    const newVideo = await response.json();\n    setVideos(prev => [newVideo, ...prev]);\n    setPrompt('');\n\n    // Start real-time status checking for this video\n    pollVideoStatus(newVideo.id);\n  } catch (error) {\n    console.error('Error generating video:', error);\n    alert(`Failed to generate video: ${error.message}`);\n  } finally {\n    setIsGenerating(false);\n  }\n};\n\n// Add real-time status polling\nconst pollVideoStatus = async videoId => {\n  const maxPolls = 60; // 5 minutes max\n  let pollCount = 0;\n  const poll = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/videos/${videoId}/status`);\n      const statusData = await response.json();\n      console.log(`üìä Video ${videoId} status:`, statusData.status);\n\n      // Update video in state\n      setVideos(prev => prev.map(video => video.id === videoId ? {\n        ...video,\n        status: statusData.status,\n        video_url: statusData.video_url,\n        thumbnail_url: statusData.thumbnail_url\n      } : video));\n\n      // Continue polling if still processing\n      if (statusData.status === 'processing' && pollCount < maxPolls) {\n        pollCount++;\n        setTimeout(poll, 5000); // Check every 5 seconds\n      } else if (statusData.status === 'completed') {\n        console.log(`üéâ Video ${videoId} completed!`);\n        // Refresh video list to get latest data\n        fetchVideos();\n      } else if (statusData.status === 'failed') {\n        console.log(`‚ùå Video ${videoId} failed`);\n      }\n    } catch (error) {\n      console.error('Error polling video status:', error);\n      if (pollCount < maxPolls) {\n        pollCount++;\n        setTimeout(poll, 10000); // Retry in 10 seconds\n      }\n    }\n  };\n\n  // Start polling after 2 seconds\n  setTimeout(poll, 2000);\n};\n\n// Update status display to show more details\nconst getStatusDisplay = video => {\n  switch (video.status) {\n    case 'pending':\n      return {\n        icon: 'üïê',\n        text: 'Pending',\n        color: '#eab308'\n      };\n    case 'processing':\n      return {\n        icon: 'üé¨',\n        text: video.runway_task_id ? 'Generating with AI...' : 'Processing',\n        color: '#3b82f6'\n      };\n    case 'completed':\n      return {\n        icon: '‚úÖ',\n        text: 'Ready to Watch',\n        color: '#22c55e'\n      };\n    case 'failed':\n      return {\n        icon: '‚ùå',\n        text: 'Generation Failed',\n        color: '#ef4444'\n      };\n    default:\n      return {\n        icon: '‚ùì',\n        text: video.status,\n        color: '#6b7280'\n      };\n  }\n};","map":{"version":3,"names":["generateVideo","e","preventDefault","prompt","trim","setIsGenerating","response","fetch","API_BASE_URL","method","headers","body","JSON","stringify","duration","ok","errorData","json","Error","error","status","newVideo","setVideos","prev","setPrompt","pollVideoStatus","id","console","alert","message","videoId","maxPolls","pollCount","poll","statusData","log","map","video","video_url","thumbnail_url","setTimeout","fetchVideos","getStatusDisplay","icon","text","color","runway_task_id"],"sources":["C:/Users/MYPC/ai-video-studio/src/components/VideoGenerationApp.jsx"],"sourcesContent":["// Add these updates to your VideoGenerationApp.jsx\r\n\r\n// Update the generateVideo function to handle real generation:\r\nconst generateVideo = async (e) => {\r\n    e.preventDefault();\r\n    if (!prompt.trim()) return;\r\n  \r\n    setIsGenerating(true);\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/videos`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          prompt: prompt.trim(),\r\n          duration: duration\r\n        }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\r\n      }\r\n  \r\n      const newVideo = await response.json();\r\n      setVideos(prev => [newVideo, ...prev]);\r\n      setPrompt('');\r\n      \r\n      // Start real-time status checking for this video\r\n      pollVideoStatus(newVideo.id);\r\n      \r\n    } catch (error) {\r\n      console.error('Error generating video:', error);\r\n      alert(`Failed to generate video: ${error.message}`);\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n  \r\n  // Add real-time status polling\r\n  const pollVideoStatus = async (videoId) => {\r\n    const maxPolls = 60; // 5 minutes max\r\n    let pollCount = 0;\r\n    \r\n    const poll = async () => {\r\n      try {\r\n        const response = await fetch(`${API_BASE_URL}/videos/${videoId}/status`);\r\n        const statusData = await response.json();\r\n        \r\n        console.log(`üìä Video ${videoId} status:`, statusData.status);\r\n        \r\n        // Update video in state\r\n        setVideos(prev => \r\n          prev.map(video => \r\n            video.id === videoId \r\n              ? { \r\n                  ...video, \r\n                  status: statusData.status,\r\n                  video_url: statusData.video_url,\r\n                  thumbnail_url: statusData.thumbnail_url\r\n                }\r\n              : video\r\n          )\r\n        );\r\n        \r\n        // Continue polling if still processing\r\n        if (statusData.status === 'processing' && pollCount < maxPolls) {\r\n          pollCount++;\r\n          setTimeout(poll, 5000); // Check every 5 seconds\r\n        } else if (statusData.status === 'completed') {\r\n          console.log(`üéâ Video ${videoId} completed!`);\r\n          // Refresh video list to get latest data\r\n          fetchVideos();\r\n        } else if (statusData.status === 'failed') {\r\n          console.log(`‚ùå Video ${videoId} failed`);\r\n        }\r\n        \r\n      } catch (error) {\r\n        console.error('Error polling video status:', error);\r\n        if (pollCount < maxPolls) {\r\n          pollCount++;\r\n          setTimeout(poll, 10000); // Retry in 10 seconds\r\n        }\r\n      }\r\n    };\r\n    \r\n    // Start polling after 2 seconds\r\n    setTimeout(poll, 2000);\r\n  };\r\n  \r\n  // Update status display to show more details\r\n  const getStatusDisplay = (video) => {\r\n    switch (video.status) {\r\n      case 'pending':\r\n        return { icon: 'üïê', text: 'Pending', color: '#eab308' };\r\n      case 'processing':\r\n        return { \r\n          icon: 'üé¨', \r\n          text: video.runway_task_id ? 'Generating with AI...' : 'Processing', \r\n          color: '#3b82f6' \r\n        };\r\n      case 'completed':\r\n        return { icon: '‚úÖ', text: 'Ready to Watch', color: '#22c55e' };\r\n      case 'failed':\r\n        return { icon: '‚ùå', text: 'Generation Failed', color: '#ef4444' };\r\n      default:\r\n        return { icon: '‚ùì', text: video.status, color: '#6b7280' };\r\n    }\r\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}