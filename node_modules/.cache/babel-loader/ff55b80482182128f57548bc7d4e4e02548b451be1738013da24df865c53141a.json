{"ast":null,"code":"// API service for video operations\n// Base URL from environment variable with fallback\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://ai-video-studio-backend.onrender.com';\n\n// Common headers for API requests\nconst getHeaders = (isJson = true) => {\n  const headers = {\n    'Accept': 'application/json'\n  };\n  if (isJson) {\n    headers['Content-Type'] = 'application/json';\n  }\n  return headers;\n};\n\n// Generic error handler\nconst handleApiError = (error, endpoint) => {\n  console.error(`API Error (${endpoint}):`, error);\n  if (error.name === 'TypeError' && error.message.includes('fetch')) {\n    throw new Error('Network error: Unable to connect to the server');\n  }\n  if (error.name === 'SyntaxError') {\n    throw new Error('Invalid response format from server');\n  }\n  throw error;\n};\n\n// Generic API request function\nconst apiRequest = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  try {\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        ...getHeaders(options.body && typeof options.body === 'object'),\n        ...options.headers\n      }\n    });\n\n    // Handle HTTP error status codes\n    if (!response.ok) {\n      const errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n\n      // Try to get error details from response\n      try {\n        const errorData = await response.json();\n        throw new Error(errorData.message || errorData.error || errorMessage);\n      } catch (parseError) {\n        throw new Error(errorMessage);\n      }\n    }\n\n    // Handle empty responses\n    const contentType = response.headers.get('content-type');\n    if (!contentType || !contentType.includes('application/json')) {\n      return null;\n    }\n    return await response.json();\n  } catch (error) {\n    handleApiError(error, endpoint);\n  }\n};\n\n/**\r\n * Fetch all videos from the API\r\n * @returns {Promise<Array>} Array of video objects\r\n */\nexport const fetchVideos = async () => {\n  try {\n    const response = await apiRequest('/videos');\n\n    // Handle different response formats\n    if (Array.isArray(response)) {\n      return response;\n    }\n    if (response && response.videos) {\n      return response.videos;\n    }\n    if (response && response.data) {\n      return response.data;\n    }\n    return [];\n  } catch (error) {\n    console.error('Error fetching videos:', error);\n    throw new Error('Failed to fetch videos. Please try again later.');\n  }\n};\n\n/**\r\n * Generate a new video\r\n * @param {Object} videoData - Video generation parameters\r\n * @param {string} videoData.prompt - Text prompt for video generation\r\n * @param {string} [videoData.style] - Video style (optional)\r\n * @param {number} [videoData.duration] - Video duration in seconds (optional)\r\n * @param {string} [videoData.resolution] - Video resolution (optional)\r\n * @returns {Promise<Object>} Generated video object\r\n */\nexport const generateVideo = async videoData => {\n  try {\n    // Validate required fields\n    if (!videoData || !videoData.prompt) {\n      throw new Error('Video prompt is required');\n    }\n    const response = await apiRequest('/generate-video', {\n      method: 'POST',\n      body: JSON.stringify(videoData)\n    });\n    return response;\n  } catch (error) {\n    console.error('Error generating video:', error);\n\n    // Provide user-friendly error messages\n    if (error.message.includes('prompt is required')) {\n      throw new Error('Please provide a video prompt');\n    }\n    if (error.message.includes('Network error')) {\n      throw new Error('Unable to connect to the server. Please check your internet connection.');\n    }\n    throw new Error('Failed to generate video. Please try again later.');\n  }\n};\n\n/**\r\n * Get a single video by ID\r\n * @param {string} videoId - The video ID\r\n * @returns {Promise<Object>} Video object\r\n */\nexport const fetchVideo = async videoId => {\n  try {\n    if (!videoId) {\n      throw new Error('Video ID is required');\n    }\n    const response = await apiRequest(`/videos/${videoId}`);\n    return response;\n  } catch (error) {\n    console.error('Error fetching video:', error);\n    throw new Error('Failed to fetch video details. Please try again later.');\n  }\n};\n\n/**\r\n * Delete a video by ID\r\n * @param {string} videoId - The video ID to delete\r\n * @returns {Promise<Object>} Deletion confirmation\r\n */\nexport const deleteVideo = async videoId => {\n  try {\n    if (!videoId) {\n      throw new Error('Video ID is required');\n    }\n    const response = await apiRequest(`/videos/${videoId}`, {\n      method: 'DELETE'\n    });\n    return response;\n  } catch (error) {\n    console.error('Error deleting video:', error);\n    throw new Error('Failed to delete video. Please try again later.');\n  }\n};\n\n/**\r\n * Update video metadata\r\n * @param {string} videoId - The video ID\r\n * @param {Object} updates - Video updates\r\n * @returns {Promise<Object>} Updated video object\r\n */\nexport const updateVideo = async (videoId, updates) => {\n  try {\n    if (!videoId) {\n      throw new Error('Video ID is required');\n    }\n    if (!updates || typeof updates !== 'object') {\n      throw new Error('Updates object is required');\n    }\n    const response = await apiRequest(`/videos/${videoId}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates)\n    });\n    return response;\n  } catch (error) {\n    console.error('Error updating video:', error);\n    throw new Error('Failed to update video. Please try again later.');\n  }\n};\n\n// Export the base URL for use in other parts of the application\nexport { API_BASE_URL };","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","getHeaders","isJson","headers","handleApiError","error","endpoint","console","name","message","includes","Error","apiRequest","options","url","response","fetch","body","ok","errorMessage","status","statusText","errorData","json","parseError","contentType","get","fetchVideos","Array","isArray","videos","data","generateVideo","videoData","prompt","method","JSON","stringify","fetchVideo","videoId","deleteVideo","updateVideo","updates"],"sources":["C:/Users/MYPC/ai-video-studio/src/services/api.js"],"sourcesContent":["// API service for video operations\r\n// Base URL from environment variable with fallback\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://ai-video-studio-backend.onrender.com';\r\n\r\n// Common headers for API requests\r\nconst getHeaders = (isJson = true) => {\r\n  const headers = {\r\n    'Accept': 'application/json',\r\n  };\r\n  \r\n  if (isJson) {\r\n    headers['Content-Type'] = 'application/json';\r\n  }\r\n  \r\n  return headers;\r\n};\r\n\r\n// Generic error handler\r\nconst handleApiError = (error, endpoint) => {\r\n  console.error(`API Error (${endpoint}):`, error);\r\n  \r\n  if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n    throw new Error('Network error: Unable to connect to the server');\r\n  }\r\n  \r\n  if (error.name === 'SyntaxError') {\r\n    throw new Error('Invalid response format from server');\r\n  }\r\n  \r\n  throw error;\r\n};\r\n\r\n// Generic API request function\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  \r\n  try {\r\n    const response = await fetch(url, {\r\n      ...options,\r\n      headers: {\r\n        ...getHeaders(options.body && typeof options.body === 'object'),\r\n        ...options.headers,\r\n      },\r\n    });\r\n\r\n    // Handle HTTP error status codes\r\n    if (!response.ok) {\r\n      const errorMessage = `HTTP ${response.status}: ${response.statusText}`;\r\n      \r\n      // Try to get error details from response\r\n      try {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || errorData.error || errorMessage);\r\n      } catch (parseError) {\r\n        throw new Error(errorMessage);\r\n      }\r\n    }\r\n\r\n    // Handle empty responses\r\n    const contentType = response.headers.get('content-type');\r\n    if (!contentType || !contentType.includes('application/json')) {\r\n      return null;\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    handleApiError(error, endpoint);\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch all videos from the API\r\n * @returns {Promise<Array>} Array of video objects\r\n */\r\nexport const fetchVideos = async () => {\r\n  try {\r\n    const response = await apiRequest('/videos');\r\n    \r\n    // Handle different response formats\r\n    if (Array.isArray(response)) {\r\n      return response;\r\n    }\r\n    \r\n    if (response && response.videos) {\r\n      return response.videos;\r\n    }\r\n    \r\n    if (response && response.data) {\r\n      return response.data;\r\n    }\r\n    \r\n    return [];\r\n  } catch (error) {\r\n    console.error('Error fetching videos:', error);\r\n    throw new Error('Failed to fetch videos. Please try again later.');\r\n  }\r\n};\r\n\r\n/**\r\n * Generate a new video\r\n * @param {Object} videoData - Video generation parameters\r\n * @param {string} videoData.prompt - Text prompt for video generation\r\n * @param {string} [videoData.style] - Video style (optional)\r\n * @param {number} [videoData.duration] - Video duration in seconds (optional)\r\n * @param {string} [videoData.resolution] - Video resolution (optional)\r\n * @returns {Promise<Object>} Generated video object\r\n */\r\nexport const generateVideo = async (videoData) => {\r\n  try {\r\n    // Validate required fields\r\n    if (!videoData || !videoData.prompt) {\r\n      throw new Error('Video prompt is required');\r\n    }\r\n\r\n    const response = await apiRequest('/generate-video', {\r\n      method: 'POST',\r\n      body: JSON.stringify(videoData),\r\n    });\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error generating video:', error);\r\n    \r\n    // Provide user-friendly error messages\r\n    if (error.message.includes('prompt is required')) {\r\n      throw new Error('Please provide a video prompt');\r\n    }\r\n    \r\n    if (error.message.includes('Network error')) {\r\n      throw new Error('Unable to connect to the server. Please check your internet connection.');\r\n    }\r\n    \r\n    throw new Error('Failed to generate video. Please try again later.');\r\n  }\r\n};\r\n\r\n/**\r\n * Get a single video by ID\r\n * @param {string} videoId - The video ID\r\n * @returns {Promise<Object>} Video object\r\n */\r\nexport const fetchVideo = async (videoId) => {\r\n  try {\r\n    if (!videoId) {\r\n      throw new Error('Video ID is required');\r\n    }\r\n\r\n    const response = await apiRequest(`/videos/${videoId}`);\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error fetching video:', error);\r\n    throw new Error('Failed to fetch video details. Please try again later.');\r\n  }\r\n};\r\n\r\n/**\r\n * Delete a video by ID\r\n * @param {string} videoId - The video ID to delete\r\n * @returns {Promise<Object>} Deletion confirmation\r\n */\r\nexport const deleteVideo = async (videoId) => {\r\n  try {\r\n    if (!videoId) {\r\n      throw new Error('Video ID is required');\r\n    }\r\n\r\n    const response = await apiRequest(`/videos/${videoId}`, {\r\n      method: 'DELETE',\r\n    });\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error deleting video:', error);\r\n    throw new Error('Failed to delete video. Please try again later.');\r\n  }\r\n};\r\n\r\n/**\r\n * Update video metadata\r\n * @param {string} videoId - The video ID\r\n * @param {Object} updates - Video updates\r\n * @returns {Promise<Object>} Updated video object\r\n */\r\nexport const updateVideo = async (videoId, updates) => {\r\n  try {\r\n    if (!videoId) {\r\n      throw new Error('Video ID is required');\r\n    }\r\n\r\n    if (!updates || typeof updates !== 'object') {\r\n      throw new Error('Updates object is required');\r\n    }\r\n\r\n    const response = await apiRequest(`/videos/${videoId}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(updates),\r\n    });\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error updating video:', error);\r\n    throw new Error('Failed to update video. Please try again later.');\r\n  }\r\n};\r\n\r\n// Export the base URL for use in other parts of the application\r\nexport { API_BASE_URL };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}